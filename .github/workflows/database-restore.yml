name: Database Restore Main Workflow

env:
  ORIGIN_DB_NAME: Production

on:
  workflow_call:
    inputs:
      TARGET_NAME:
        required: true
        type: string
      TARGET_SLACK_CHANNEL:
        required: true
        type: string
      MISSION_CONTROL_TARGET_ID:
        required: true
        type: string

jobs:
  db_restore:
    name: DB Restore
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Send Slack message (Process started)
        uses: ./.github/actions/slack-message
        with:
          SLACK_API_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
          SLACK_CHANNEL: ${{ inputs.TARGET_SLACK_CHANNEL }}
          TITLE: ":rocket: Database Restore Started"
          MESSAGE: |
            The ${{ inputs.TARGET_NAME }} environment will be unavailable for several minutes.
            \\n\\n
            You can check the progress in <https://missioncontrol.${{ vars.BR_CLOUD }}/#/environment/${{ inputs.MISSION_CONTROL_TARGET_ID }}/details|Mission Control>.


      - name: Get BR Cloud Token
        id: jwt_token
        uses: ./.github/actions/br-cloud-token
        with:
          MISSION_CONTROL_API_USERNAME: ${{ secrets.MISSION_CONTROL_API_USERNAME }}
          MISSION_CONTROL_API_PASSWORD: ${{ secrets.MISSION_CONTROL_API_PASSWORD }}
          MISSION_CONTROL_API_HOST: ${{ vars.BR_CLOUD }}

      - name: Get All DB Backup Details
        id: backups
        run: |
          response=$(curl \
          -H "Accept: application/json; charset=utf-8" \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X GET https://api.${{ vars.BR_CLOUD }}/v3/backups)
          echo "details=${response}" >> $GITHUB_OUTPUT

      - name: Get Latest Backup ID of the Origin DB
        id: backup-details
        run: |
          id=$(echo '${{steps.backups.outputs.details}}' | sed -e 's/+00:00/Z/g' | jq --arg TARGET $(echo '${{ env.ORIGIN_DB }}' | awk '{print tolower($0)}' ) '[ .[] | select(.environmentName==$TARGET ) ] | sort_by( .createdAt | fromdate ) | reverse | .[0].id' | sed -e 's/"//g' )
          echo "id=${id}" >> $GITHUB_OUTPUT
        env:
          ORIGIN_DB: ${{ env.ORIGIN_DB_NAME }}

      - name: Check ID is not null
        uses: actions/github-script@v6
        if: ${{ env.BACKUP_ID == 'null' }}
        with:
          script: core.setFailed('Error getting DB backup ID for "${{ env.TARGET }}" environment.')
        env:
          TARGET: ${{ inputs.TARGET_NAME }}
          BACKUP_ID: ${{ steps.backup-details.outputs.id }}

      - name: Request DB restore for Target Environment
        id: db-restore-request
        run: |
          code=$(curl \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X PUT https://api.${{ vars.BR_CLOUD }}/v3/backups/${{ env.BACKUP_ID }}/restore \
          -d '{ "environmentId": "${{ env.TARGET_ID }}", "redeploy": true}' \
          -o /dev/null -w '%{http_code}\n' -s)
          echo "code=$code" >> $GITHUB_OUTPUT
        env:
          BACKUP_ID: ${{ steps.backup-details.outputs.id }}
          TARGET_ID: ${{ inputs.MISSION_CONTROL_TARGET_ID }}

      - name: Check Response Code from Restore Request
        uses: actions/github-script@v6
        if: ${{ steps.db-restore-request.outputs.code != 202 }}
        with:
          script: core.setFailed('Response code mismatch while requesting DB restore from BR Cloud! Response ${{ env.CODE }}')
        env:
          CODE: ${{ steps.db-restore-request.outputs.code }}