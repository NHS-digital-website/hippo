name: Deploy to UAT and Git Tag (v2)

on:
  push:
    branches:
      - master

jobs:
  CalcVersion:
    name: Update Distribution Version Number
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      ENV: uat

    steps:

      #
      # Step 1
      #
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Need all the tags for versioning
          ref: master

      #
      # Step 2
      #
      - name: Bump the version number
        run: make version.bumpup

      #
      # Step 3
      #
      - name: Push tag back to github
        run: |
          make git.update-environment-tag
          git push --tags

  build:
    name: Build Distribution For BR Cloud
    needs: CalcVersion
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      ENV: uat

    steps:

      #
      # Step 1
      #
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Need all the tags for versioning
          ref: master

      #
      # Step 2
      #
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: 8

      #
      # Step 3
      # Get the Caches
      #
      - name: Slack message (building the branch)
        uses: ./.github/actions/build-cache

      #
      # Step 4
      #
      - name: Build master
        run: make clean build
        env:
          HIPPO_MAVEN_PASSWORD: ${{ secrets.HIPPO_MAVEN_PASSWORD }}
          HIPPO_MAVEN_USERNAME: ${{ secrets.HIPPO_MAVEN_USERNAME }}

      #
      # 5
      # upload build for next job
      #
      - name: Store Artifact for Later in the Pipeline
        uses: actions/upload-artifact@v3
        with:
          name: distribution-odv2
          path: target/*.tar.gz
          if-no-files-found: error

  deployment:
    name: Deploy Distribution to UAT
    needs: build
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      #
      # Get API access token and verify it.
      #
      - name: Get BR Cloud Token
        id: jwt_token
        uses: ./.github/actions/br-cloud-token
        with:
          MISSION_CONTROL_API_USERNAME: ${{ secrets.MISSION_CONTROL_API_USERNAME }}
          MISSION_CONTROL_API_PASSWORD: ${{ secrets.MISSION_CONTROL_API_PASSWORD }}
          MISSION_CONTROL_API_HOST: ${{ vars.BR_CLOUD }}

      #
      # Download the distribution artifact
      #
      - name: Download version artifact
        uses: actions/download-artifact@v3
        id: download

      #
      # Get and store the details of the download
      #
      - name: Get artifact details
        id: details
        run: |
          echo "distribution=$(echo ls *.tar.gz | awk '{ print $2 }')" >> $GITHUB_OUTPUT
          echo "version=$(echo ls *.tar.gz | awk '{ print $2 }' | grep -oP '(?<=website-).*(?=-distribution.tar.gz)')" >> $GITHUB_OUTPUT
        working-directory: ${{steps.download.outputs.download-path}}/distribution-odv2

      #
      # Upload Build to BR Cloud
      #
      - name: Upload Build to BR Cloud
        id: distribution
        run: |
          response=$(curl -i \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X POST https://api.${{ vars.BR_CLOUD }}/v3/distributions \
          -F "dist_file=@${{ env.DISTROBUTION }};filename=${{ env.VERSION }}.tar.gz")
          id=$(echo $response | awk 'match($0, /id":"[^"]+"/) {print substr($0, RSTART+5)}' | cut -d '"' -f 1 )
          echo "id=$id" >> $GITHUB_OUTPUT
        env:
          DISTROBUTION: ${{steps.details.outputs.distribution}}
          VERSION: ${{steps.details.outputs.version}}
        working-directory: ${{steps.download.outputs.download-path}}/distribution-odv2

      #
      # Check Response
      #
      - name: Check Response has ID from Upload Build to BR Cloud
        if: ${{ steps.distribution.outputs.id.length == 36 }}
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('Upload Build to BR Cloud failed!')
        env:
          # For debugging
          ID: ${{ steps.distribution.outputs.id }}
          ID-LENGTH: ${{ steps.distribution.outputs.id.length }}

      #
      # Prepare App Config Deployment Details
      #
      - name: Get Configuration Files Details
        id: files
        run: |
          response=$(curl \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X GET https://api.${{ vars.BR_CLOUD }}/v3/appconfigfiles)
          echo "details=${response}" >> $GITHUB_OUTPUT

      - name: Get Lastest System Properties for Envrinment
        id: system-properties
        run: |
          id=$(echo '${{steps.files.outputs.details}}' | sed -e 's/+00:00/Z/g' | jq ' . | map( select( .name | startswith( "${{ env.TARGET }}-system-" ) ) ) | sort_by( .createdAt | fromdate ) | reverse | .[0].id')
          echo "id=${id}" >> $GITHUB_OUTPUT
        env:
          TARGET: "uat"

      - name: Get Lastest Platform Properties for Envrinment
        id: platform-properties
        run: |
          id=$(echo '${{steps.files.outputs.details}}' | sed -e 's/+00:00/Z/g' | jq ' . | map( select( .name | startswith( "${{ env.TARGET }}-content-search-" ) ) ) | sort_by( .createdAt | fromdate ) | reverse | .[0].id')
          echo "id=${id}" >> $GITHUB_OUTPUT
        env:
          TARGET: "uat"

      - name: Get Lastest Content Search key for Envrinment
        id: content-search-key
        run: |
          id=$(echo '${{steps.files.outputs.details}}' | sed -e 's/+00:00/Z/g' | jq ' . | map( select( .name | startswith( "content-search-key-" ) ) ) | sort_by( .createdAt | fromdate ) | reverse | .[0].id')
          echo "id=${id}" >> $GITHUB_OUTPUT

      - name: Get Lastest AWS Keys for Envrinment
        id: aws-keys
        run: |
          id=$(echo '${{steps.files.outputs.details}}' | sed -e 's/+00:00/Z/g' | jq ' . | map( select( .name | startswith( "${{ env.TARGET }}-aws-credentials-" ) ) ) | sort_by( .createdAt | fromdate ) | reverse | .[0].id')
          echo "id=${id}" >> $GITHUB_OUTPUT
        env:
          TARGET: "uat"

      - name: Get Lastest IP Configuration File ID
        id: latest-ip-whitelist
        run: |
          id=$(echo '${{steps.files.outputs.details}}' | sed -e 's/+00:00/Z/g' | jq ' . | map( select( .name | startswith( "hippo-ipfilter-" ) ) ) | sort_by( .createdAt | fromdate ) | reverse | .[0].id')
          echo "id=${id}" >> $GITHUB_OUTPUT

      - name: Get latest Email SMTP properties File
        id: brc-mail-smtp
        run: |
          id=$(echo '${{steps.files.outputs.details}}' | sed -e 's/+00:00/Z/g' | jq ' . | map( select( .name | startswith( "brc-mail-smtp-" ) ) ) | sort_by( .createdAt | fromdate ) | reverse | .[0].id')
          echo "id=${id}" >> $GITHUB_OUTPUT

      - name: Request Deployment from BR Cloud
        id: deployment
        run: |
          code=$(curl -i \
          -H "Accept: application/json; charset=utf-8" \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X PUT https://api.${{ vars.BR_CLOUD }}/v3/environments/${{ env.ENVIRONMENT }}/deploy \
          -d '{ "distributionId": "${{ env.DISTRIBUTION }}", "strategy" : "rollingupdate", "appConfigFileRoles": [ { "appConfigFileId": ${{ steps.aws-keys.outputs.id }}, "role": "file", "newFilename": "aws-credentials.properties" }, { "appConfigFileId": ${{ steps.system-properties.outputs.id }}, "role": "systemproperty" }, { "appConfigFileId": ${{ steps.latest-ip-whitelist.outputs.id }}, "role": "file", "newFilename": "hippo-ipfilter.properties" }, { "appConfigFileId": ${{ steps.brc-mail-smtp.outputs.id }}, "role": "file", "newFilename": "brc-mail-smtp.properties" }, { "appConfigFileId": ${{ steps.platform-properties.outputs.id }}, "role": "file", "newFilename": "platform.properties" }, { "appConfigFileId": ${{ steps.content-search-key.outputs.id }}, "role": "file", "newFilename": "content-search-key.pem" } ] }' \
          -o /dev/null -w '%{http_code}\n' -s)
          echo "code=$code" >> $GITHUB_OUTPUT
        env:
          DISTRIBUTION: ${{ steps.distribution.outputs.id }}
          ENVIRONMENT: "083ff91e-6ac5-4638-945c-3ee18acc40bf"

      - name: Check Response Code from Request Deployment
        uses: actions/github-script@v6
        if: ${{ steps.deployment.outputs.code != 202 }}
        with:
          script: core.setFailed('Response code mismatch while requesting deployment from BR Cloud! Response ${{ env.CODE }}')
        env:
          CODE: ${{ steps.deployment.outputs.code }}