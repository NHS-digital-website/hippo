name: Pull Request Workflow

on:
  pull_request:
    branches:
      - master
      - christmas-*
      - freeze-trunk-*

jobs:
  build-and-test:
    name: "Build and test project"
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      HIPPO_MAVEN_PASSWORD: ${{ secrets.HIPPO_MAVEN_PASSWORD }}
      HIPPO_MAVEN_USERNAME: ${{ secrets.HIPPO_MAVEN_USERNAME }}

    steps:

      # Step 1
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      # Step 2
      - name: Check commit message
        if: ${{ github.event.pull_request.user.login != 'dependabot[bot]' }}
        run: make check.commit-msg

      # Step 3
      - name: Print Google Chrome version
        run: google-chrome --version

      # Step 4
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: 8

      # Step 5
      - name: Slack message (building the branch)
        uses: ./.github/actions/build-cache

      # Step 6 (Formatting Checks)
      - name: Check YAML formatting
        run: make check.yaml

      - name: Lint JS Files
        id: jsLint
        run: make ci-pipeline-lint-frontend
      - name: Lint fail message
        if: ${{ always() && steps.jsLint.outcome == 'failure' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'JS Lint has failed. Run `make lint-frontend` locally to find what needs fixing.'
            })


      # Step 7 (Functional Tests)
      - name: Test Project
        run: make test.site CI=true

      # Step 8
      # Store test results as an artifact
      - name: "Upload cucumber report"
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cucumber-report
          path: |
            acceptance-tests/src/test/node/cucumber-report.html

      # Step 9
      # Read test summary
      - name: Read test summary
        if: always()
        id: testsummary
        run: |
          SUMMARY=$(cat acceptance-tests/src/test/node/cucumber-summary.txt)
          SUMMARY="${SUMMARY//'%'/'%25'}"
          SUMMARY="${SUMMARY//$'\n'/'%0A'}"
          SUMMARY="${SUMMARY//$'\r'/'%0D'}"
          echo "summary=$SUMMARY" >> $GITHUB_OUTPUT

      # Step 10
      # Add comment to PR with test results
      - name: "Added PR comment"
        if: ${{ always() && steps.testsummary.outcome == 'success' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `**Test Results** \n ${{steps.testsummary.outputs.summary}}`
            })
