name: Remove Old Builds

on:
  schedule:
    # Runs at 9am UTC weekdays
    - cron: "0 9 * * 1-5"

env:
  NO_OF_DISTRIBUTION_TO_KEEP_PROD: 40
  NO_OF_DISTRIBUTION_TO_KEEP_NON_PROD: 10
  PROD_REG_EXPRESSION: "v\\\\d{1,2}\\\\.\\\\d{1,2}\\\\.\\\\d{3,}\\\\.tar"
  NON_PROD_REG_EXPRESSION: "v\\\\d{1,2}\\\\.\\\\d{1,2}\\\\.\\\\d{3,}\\\\-\\\\d{1,2}-[a-z0-9]+\\\\.tar"

jobs:

  remove-old-distributions:
    name: Remove Old distribution Ids
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Get BR Cloud Token
        id: jwt_token
        uses: ./.github/actions/br-cloud-token
        with:
          MISSION_CONTROL_API_USERNAME: ${{ secrets.MISSION_CONTROL_API_USERNAME }}
          MISSION_CONTROL_API_PASSWORD: ${{ secrets.MISSION_CONTROL_API_PASSWORD }}
          MISSION_CONTROL_API_HOST: ${{ vars.BR_CLOUD }}

      - name: Get All Distribution Ids
        id: all-distribution-id
        run: |
          response=$(curl \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X GET https://api.${{ vars.BR_CLOUD }}/v3/distributions)
          echo "allDistIds=${response}" >> $GITHUB_OUTPUT

      - name: Distribution Ids Retrieval failed
        if: ${{ contains(steps.all-distribution-id.response ,'401') }}
        uses: actions/github-script@v7
        with:
          script: |
            core.setFailed('Retrival of distibution ids failed ')
        env:
          # 'CODE' is for debugging fails
          CODE: ${{ steps.all-distribution-id.response }}


      - name: Get NON-Prod Distribution Ids To be Removed
        # Retrieve all non prod distribution ids which needs to be removed
        id: latest-non-prod-distribution-ids
        run: |
          latestId=$(echo '${{steps.all-distribution-id.outputs.allDistIds}}' | sed -e 's/+00:00/Z/g' | jq --compact-output '[.items[] | {id: .id , date: .createdAt, name: .name}] | sort_by(.date) | reverse | map(select(.name | test("${{env.NON_PROD_REG_EXPRESSION}}"))) | map(.id) | .[${{env.NO_OF_DISTRIBUTION_TO_KEEP_NON_PROD}}:]')
          fileNamesNonProd=$(echo '${{steps.all-distribution-id.outputs.allDistIds}}' | sed -e 's/+00:00/Z/g' | jq --compact-output '[.items[] | {id: .id , date: .createdAt, name: .name}] | sort_by(.date) | reverse | map(select(.name | test("${{env.NON_PROD_REG_EXPRESSION}}"))) | map(.name) | .[${{env.NO_OF_DISTRIBUTION_TO_KEEP_NON_PROD}}:]')
          echo "latestNonProdDistIds=${latestId}" >> $GITHUB_OUTPUT
          echo "latestNonProdDistName=${fileNamesNonProd}" >> $GITHUB_OUTPUT

      - name: Get Latest Prod Distribution Ids to be removed
        # Retrieve all prod distribution ids which needs to be removed
        id: latest-prod-distribution-ids
        run: |
          latestId=$(echo '${{steps.all-distribution-id.outputs.allDistIds}}' | sed -e 's/+00:00/Z/g' | jq --compact-output '[.items[] | {id: .id , date: .createdAt, name: .name}] | sort_by(.date)| reverse | map(select(.name | test("${{env.PROD_REG_EXPRESSION}}"))) | map(.id) | .[${{env.NO_OF_DISTRIBUTION_TO_KEEP_PROD}}:]')
          fileNamesProd=$(echo '${{steps.all-distribution-id.outputs.allDistIds}}' | sed -e 's/+00:00/Z/g' | jq --compact-output '[.items[] | {id: .id , date: .createdAt, name: .name}] | sort_by(.date)| reverse | map(select(.name | test("${{env.PROD_REG_EXPRESSION}}"))) | map(.name) | .[${{env.NO_OF_DISTRIBUTION_TO_KEEP_PROD}}:]')
          echo "latestProdDistIds=${latestId}" >> $GITHUB_OUTPUT
          echo "latestProdDistName=${fileNamesProd}" >> $GITHUB_OUTPUT

      - name: Print Names
        #Step for logging purpose
        id: print-ids
        run: |
          echo " All non Prod Files to be removed "+ ${{steps.latest-non-prod-distribution-ids.outputs.latestNonProdDistName}}
          echo "***********************"
          echo " All  Prod Files to be removed "+ ${{steps.latest-prod-distribution-ids.outputs.latestProdDistName}}
          echo "***********************"


      - name: Remove Old Non Prod Distribution
        run: |
          declare -a  nonProdLatestDistIds=$(echo  '${{steps.latest-non-prod-distribution-ids.outputs.latestNonProdDistIds}}' | tr "[" "(" | tr "]" ")" | tr "," " ")

          echo "nonProdLatestDistIds  Length --> "  ${#nonProdLatestDistIds[@]}

            for i in "${!nonProdLatestDistIds[@]}";
            do
              printf "%s\t%s\n" "$i" "${nonProdLatestDistIds[$i]}"
              response=$(curl \
                -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
                -X DELETE https://api.${{ vars.BR_CLOUD }}/v3/distributions/${nonProdLatestDistIds[$i]})
              echo ${response}
            done

      - name: Remove Old Prod Distribution
        run: |
          declare -a  prodLatestDistIds=$(echo  '${{steps.latest-prod-distribution-ids.outputs.latestProdDistIds}}' | tr "[" "(" | tr "]" ")" | tr "," " ")

          echo "prodLatestDistIds  Length --> "  ${#prodLatestDistIds[@]}

            for i in "${!prodLatestDistIds[@]}";
            do
              printf "%s\t%s\n" "$i" "${prodLatestDistIds[$i]}"
              response=$(curl \
                -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
                -X DELETE https://api.${{ vars.BR_CLOUD }}/v3/distributions/${prodLatestDistIds[$i]})
              echo ${response}
            done