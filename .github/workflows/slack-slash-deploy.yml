#Slack deployment command for (TST,Development, CS)
name: Slack Deployment Command

on:
  repository_dispatch:
    types:
      - slack-deploy-command

jobs:

  integrity:
    name: Slack Integrity Check
    runs-on: ubuntu-latest
    timeout-minutes: 1

    steps:

      #
      # Validate that the origin is from Slack
      # See: https://api.slack.com/authentication/verifying-requests-from-slack
      #
      - name: Validate Origin
        uses: actions/github-script@v6
        env:
          AGENT: ${{ github.event.client_payload.integrity.agent }}
          BODY: ${{ github.event.client_payload.integrity.body }}
          TIMESTAMP: ${{ github.event.client_payload.integrity.timestamp }}
          SIGNATURE: ${{ github.event.client_payload.integrity.signature }}
          SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}
        with:
          script: |
            if(!`${process.env.AGENT}`.startsWith("Slackbot")){
                core.setFailed("User agent mismatch.")
            } else {
                const base = `v0:${process.env.TIMESTAMP}:${process.env.BODY}`
                const hash = require('crypto').createHmac('sha256', `${process.env.SIGNING_SECRET}`).update(base).digest("hex")
                if(`${process.env.SIGNATURE}` !== `v0=${hash}`) {
                  core.setFailed("The origin integrity check failed.")
                }
            }

      #
      # Provide a URL to the active GitHub Actions Workflow run
      #
      - name: Slack message (Track progress message)
        if: ${{ success() }}
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.SLACK_WEBHOOK }}
          data: '{ "channel": "${{ env.CHANNEL_ID }}", "text": "Pipeline progress...", "attachments": [{ "text" : "The pipeline logs are here ${{ env.GITHUB_WORKFLOW_URL }}",  "color": "#005EB8" }] }'
        env:
          SLACK_WEBHOOK: ${{  secrets.SLACK_WEBHOOK }}
          GITHUB_WORKFLOW_URL: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          CHANNEL_ID: ${{ github.event.client_payload.data.channel_id }}


  build:
    name: Build Commit
    needs: integrity
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      PAYLOAD_CONTEXT: ${{ toJson(github.event.client_payload) }}
      BRANCH: ${{ github.event.client_payload.data.text }}
      CHANNEL_ID: ${{ github.event.client_payload.data.channel_id }}
      SLACK_WEBHOOK: ${{  secrets.SLACK_WEBHOOK }}
      USER_ID: ${{  github.event.client_payload.data.user_id }}

    steps:

      #
      # Checkout the branch
      #
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}
          fetch-depth: 0 # Need all the tags for versioning

      - name: Slack message (failed to checkout the branch)
        if: ${{ failure() }}
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.SLACK_WEBHOOK }}
          data: '{ "channel": "${{ env.CHANNEL_ID }}", "text": "Pipeline progress...", "attachments": [{ "text" : "Cannot find the branch named ${{ env.BRANCH }}",  "color": "#DA291C" }] }'


      #
      # Build the branch
      #
      - name: Slack message (building the branch)
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.SLACK_WEBHOOK }}
          data: '{ "channel": "${{ env.CHANNEL_ID }}", "text": "Pipeline progress...", "attachments": [{ "text" : "Building the branch (${{ env.BRANCH }})", "color": "#78BE20" }] }'

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: 8

      - name: Get cache key helper values
        uses: actions/github-script@v6
        id: cache-key-helper
        with:
          result-encoding: string
          script: |
            return JSON.stringify({
              "year" : new Date().getFullYear(),
              "rotation" : new Date().getTimezoneOffset()
            })

      - name: Setup cache (Maven packages)
        uses: actions/cache@v3
        env:
          YEAR: ${{ fromJSON(steps.cache-key-helper.outputs.result).year }}
          ROTATION: ${{ fromJSON(steps.cache-key-helper.outputs.result).rotation }}
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-nhs-digital-${{ env.YEAR }}-${{ env.ROTATION }}
          restore-keys: |
            ${{ runner.os }}-maven-nhs-digital-${{ env.YEAR }}-
            ${{ runner.os }}-maven-nhs-digital-
            ${{ runner.os }}-maven-nhs-

      - name: Setup cache (Node.js packages)
        uses: actions/cache@v3
        env:
          YEAR: ${{ fromJSON(steps.cache-key-helper.outputs.result).year }}
          ROTATION: ${{ fromJSON(steps.cache-key-helper.outputs.result).rotation }}
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-nhs-digital-${{ env.YEAR }}-${{ env.ROTATION }}
          restore-keys: |
            ${{ runner.os }}-node-nhs-digital-${{ env.YEAR }}-
            ${{ runner.os }}-node-nhs-digital-
            ${{ runner.os }}-node-nhs-

      - name: Build and Package Branch
        run: make clean build
        env:
          HIPPO_MAVEN_PASSWORD: ${{ secrets.HIPPO_MAVEN_PASSWORD }}
          HIPPO_MAVEN_USERNAME: ${{ secrets.HIPPO_MAVEN_USERNAME }}

      - name: Slack message (failed to build the branch)
        if: ${{ failure() }}
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.SLACK_WEBHOOK }}
          data: '{ "channel": "${{ env.CHANNEL_ID }}", "text": "Pipeline progress...", "attachments": [{ "text" : "Failed to build the branch named ${{ env.BRANCH }}",  "color": "#DA291C" }] }'


      #
      # upload build for next job
      #
      - name: Store Artifact for Later in the Pipeline
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: target/*.tar.gz
          if-no-files-found: error

      - name: Slack message (failed to store artifact for later in the pipeline)
        if: ${{ failure() }}
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.SLACK_WEBHOOK }}
          data: '{ "channel": "${{ env.CHANNEL_ID }}", "text": "Pipeline progress...", "attachments": [{ "text" : "The pipeline failed to locate the built artifact",  "color": "#DA291C" }] }'

      #
      # Todo: success slack message that gives a link to the GitHub action for downloading the build for debugging.
      #

  upload:
    name: Upload Build to BR Cloud ODv2
    needs:
      - build
    runs-on: ubuntu-latest
    env:
      PAYLOAD_CONTEXT: ${{ toJson(github.event.client_payload) }}
      BRANCH: ${{ github.event.client_payload.data.text }}
      CHANNEL_ID: ${{ github.event.client_payload.data.channel_id }}
      SLACK_WEBHOOK: ${{  secrets.SLACK_WEBHOOK }}
      USER_ID: ${{  github.event.client_payload.data.user_id }}

    steps:

      - name: Checkout
        uses: actions/checkout@v3

      #
      # Upload the build
      #
      - name: Slack message (uploading the build)
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.SLACK_WEBHOOK }}
          data: '{ "channel": "${{ env.CHANNEL_ID }}", "text": "Pipeline progress...", "attachments": [{ "text" : "Preparing to uploading the build to BR ODv2", "color": "#78BE20" }] }'


      # Set up steps.

      #
      # Identify target server
      #
      - name: Identify target
        uses: actions/github-script@v6
        id: find-target
        env:
          CS_ID: ${{ vars.BR_ID_CS }}
          TST_ID: ${{ vars.BR_ID_TST }}
          DEV_ID: ${{ vars.BR_ID_DEV }}
          TRAINING_ID: ${{ vars.BR_ID_TRAINING }}
        with:
          result-encoding: json
          script: |
            const environments = {
              C031HQR9Q0P: {
                "name" : "cs",
                "id": `${process.env.CS_ID}`
              },
              C026PH4GQSH: {
                "name": "development",
                "id": `${process.env.DEV_ID}`
              },
              C0323S3FW4T: {
                "name": "tst",
                "id": `${process.env.TST_ID}`
              },
              C03AADPJJRY: {
                "name": "training",
                "id": `${process.env.TRAINING_ID}`
              }
            }
            if(environments[`${process.env.CHANNEL_ID}`] === undefined) {
              core.setFailed("No target environment has been identifed.")
            } else {
              return environments[`${process.env.CHANNEL_ID}`]
            }

      - name: Slack message (failed to identify the target)
        if: ${{ failure() }}
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.SLACK_WEBHOOK }}
          data: '{ "channel": "${{ env.CHANNEL_ID }}", "text": "Pipeline progress...", "attachments": [{ "text" : "Cannot find the target server. Are you running the command from the correct channel?",  "color": "#DA291C" }] }'

      - name: Print Identify target for debugging
        run: |
          echo ${{fromJson(steps.find-target.outputs.result).name}}
          echo ${{fromJson(steps.find-target.outputs.result).id}}

      # Get API access token and verify it.
      - name: Get BR Cloud Token
        id: jwt_token
        uses: ./.github/actions/br-cloud-token
        with:
          MISSION_CONTROL_API_USERNAME: ${{ secrets.MISSION_CONTROL_API_USERNAME }}
          MISSION_CONTROL_API_PASSWORD: ${{ secrets.MISSION_CONTROL_API_PASSWORD }}
          MISSION_CONTROL_API_HOST: ${{ vars.BR_CLOUD }}

      # Main steps
      - name: Download version artifact
        uses: actions/download-artifact@v2
        id: download

      #
      # Get and store the details of the download
      #
      - name: Get artifact details
        id: details
        run: |
          echo "distribution=$(echo ls *.tar.gz | awk '{ print $2 }')" >> $GITHUB_OUTPUT
          echo "version=$(echo ls *.tar.gz | awk '{ print $2 }' | grep -oP '(?<=website-).*(?=-distribution.tar.gz)')" >> $GITHUB_OUTPUT
        working-directory: ${{steps.download.outputs.download-path}}/build

      #
      # Upload Build to BR Cloud
      #
      - name: Upload Build to BR Cloud
        id: distribution
        run: |
          response=$(curl -i \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X POST https://api.${{ vars.BR_CLOUD }}/v3/distributions \
          -F "dist_file=@${{ env.DISTROBUTION }};filename=${{ env.VERSION }}.tar.gz")
          id=$(echo $response | awk 'match($0, /id":"[^"]+"/) {print substr($0, RSTART+5)}' | cut -d '"' -f 1 )
          echo "id=$id" >> $GITHUB_OUTPUT
        env:
          DISTROBUTION: ${{steps.details.outputs.distribution}}
          VERSION: ${{steps.details.outputs.version}}
        working-directory: ${{steps.download.outputs.download-path}}/build

      - name: Check Response has ID from Upload Build to BR Cloud
        if: ${{ steps.distribution.outputs.id.length == 36 }}
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('Upload Build to BR Cloud failed!')
        env:
          # For debugging
          ID: ${{ steps.distribution.outputs.id }}
          ID-LENGTH: ${{ steps.distribution.outputs.id.length }}


      - name: Slack message (failed to upload )
        if: ${{ failure() }}
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.SLACK_WEBHOOK }}
          data: '{ "channel": "${{ env.CHANNEL_ID }}", "text": "Pipeline progress...", "attachments": [{ "text" : "Failed to upload the build",  "color": "#DA291C" }] }'


      #
      # Prepare App Config Deployment Details
      #
      - name: Get Configuration Files Details
        id: files
        run: |
          response=$(curl \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X GET https://api.${{ vars.BR_CLOUD }}/v3/appconfigfiles)
          echo "details=${response}" >> $GITHUB_OUTPUT

      - name: Get Lastest System Properties for Envrinment
        id: system-properties
        run: |
          id=$(echo '${{steps.files.outputs.details}}' | sed -e 's/+00:00/Z/g' | jq ' . | map( select( .name | startswith( "${{ env.TARGET }}-system-" ) ) ) | sort_by( .createdAt | fromdate ) | reverse | .[0].id')
          echo "id=${id}" >> $GITHUB_OUTPUT
        env:
          TARGET: ${{ fromJson(steps.find-target.outputs.result).name }}

      - name: Get Lastest AWS Keys for Envrinment
        id: aws-keys
        run: |
          id=$(echo '${{steps.files.outputs.details}}' | sed -e 's/+00:00/Z/g' | jq ' . | map( select( .name | startswith( "${{ env.TARGET }}-aws-credentials-" ) ) ) | sort_by( .createdAt | fromdate ) | reverse | .[0].id')
          echo "id=${id}" >> $GITHUB_OUTPUT
        env:
          TARGET: ${{ fromJson(steps.find-target.outputs.result).name }}

      - name: Get Lastest IP Configuration File ID
        id: latest-ip-whitelist
        run: |
          id=$(echo '${{steps.files.outputs.details}}' | sed -e 's/+00:00/Z/g' | jq ' . | map( select( .name | startswith( "hippo-ipfilter-" ) ) ) | sort_by( .createdAt | fromdate ) | reverse | .[0].id')
          echo "id=${id}" >> $GITHUB_OUTPUT

      - name: Get latest Email SMTP properties File
        id: brc-mail-smtp
        run: |
          id=$(echo '${{steps.files.outputs.details}}' | sed -e 's/+00:00/Z/g' | jq ' . | map( select( .name | startswith( "brc-mail-smtp-" ) ) ) | sort_by( .createdAt | fromdate ) | reverse | .[0].id')
          echo "id=${id}" >> $GITHUB_OUTPUT


      #
      # Request deployment from ODv2
      #
      - name: Slack message (requesting deployment)
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.SLACK_WEBHOOK }}
          data: '{ "channel": "${{ env.CHANNEL_ID }}", "text": "Pipeline progress...", "attachments": [{ "text" : "Requesting a deployment on BR ODv2 going to ${{steps.find-target.outputs.result.name}}", "color": "#78BE20" }] }'

      - name: Request Deployment from BR Cloud
        id: deployment
        run: |
          curl -i \
          -H "Accept: application/json; charset=utf-8" \
          -H "Authorization: Bearer ${{ steps.jwt_token.outputs.token }}" \
          -X PUT https://api.${{ vars.BR_CLOUD }}/v3/environments/${{ env.ENVIRONMENT }}/deploy \
          -d '{ "distributionId": "${{ env.DISTRIBUTION }}", "strategy" : "rollingupdate", "appConfigFileRoles": [ { "appConfigFileId": ${{ steps.aws-keys.outputs.id }}, "role": "file", "newFilename": "aws-credentials.properties" }, { "appConfigFileId": ${{ steps.system-properties.outputs.id }}, "role": "systemproperty" }, { "appConfigFileId": ${{ steps.latest-ip-whitelist.outputs.id }}, "role": "file", "newFilename": "hippo-ipfilter.properties" }, { "appConfigFileId": ${{ steps.brc-mail-smtp.outputs.id }}, "role": "file", "newFilename": "brc-mail-smtp.properties" } ] }'
        env:
          DISTRIBUTION: ${{ steps.distribution.outputs.id }}
          ENVIRONMENT: ${{ fromJson(steps.find-target.outputs.result).id }}

      - name: Check Response Code from Request Deployment from BR Cloud
        if: ${{ steps.deployment.outputs.code >= 200 && steps.deployment.outputs.code < 300 }}
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('Request Deployment from BR Cloud failed!')

      - name: Slack message (failed to deploy)
        if: ${{ failure() }}
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.SLACK_WEBHOOK }}
          data: '{ "channel": "${{ env.CHANNEL_ID }}", "text": "Pipeline progress...", "attachments": [{ "text" : "BR ODv2 failed to request a deployment",  "color": "#DA291C" }] }'


      #
      # End with a success message
      #
      - name: Slack message (end message)
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ env.SLACK_WEBHOOK }}
          data: '{ "channel": "${{ env.CHANNEL_ID }}", "text": "Pipeline progress...", "attachments": [{ "text" : "BR ODv2 is deploying. <@${{ env.USER_ID }}> You can track progress here https://missioncontrol.${{ vars.BR_CLOUD }}/#/environment/${{ fromJson(steps.find-target.outputs.result).id }}/details", "color": "#78BE20" }] }'