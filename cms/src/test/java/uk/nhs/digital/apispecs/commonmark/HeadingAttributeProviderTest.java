package uk.nhs.digital.apispecs.commonmark;

import static org.mockito.BDDMockito.then;
import static org.mockito.MockitoAnnotations.initMocks;

import org.commonmark.node.Heading;
import org.commonmark.node.Node;
import org.commonmark.node.Text;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;

import java.util.Map;

public class HeadingAttributeProviderTest {

    // Bit of an overkill to be using mock for a simple map
    // but it enables nice, fluent syntax for verifications.
    @Mock private Map<String, String> attributes;

    @Before
    public void setUp() {
        initMocks(this);
    }

    @Test
    public void setsHeadingId_autoGeneratedFromHeadingText() {

        // given
        final String headingText = " Heading Text ";
        final Node headingNode = new Heading();
        headingNode.appendChild(new Text(headingText));

        final String noHeadingIpPrefix = null;

        final HeadingAttributeProvider headingAttributeProvider = new HeadingAttributeProvider(noHeadingIpPrefix);

        final String expectedId = "heading-text";

        // when
        headingAttributeProvider.setAttributes(headingNode, "tagName is ignored", attributes);

        // then
        then(attributes).should().put("id", expectedId);
        then(attributes).shouldHaveNoMoreInteractions();
    }

    @Test
    public void setsHeadingId_withCustomHeadingIdPrefix_whenProvided() {

        // given
        final String headingText = " Heading Text ";
        final Node headingNode = new Heading();
        headingNode.appendChild(new Text(headingText));

        final String customPrefix = "customPrefix__";

        final HeadingAttributeProvider headingAttributeProvider = new HeadingAttributeProvider(customPrefix);

        final String expectedHeadingId = "customPrefix__heading-text";

        // when
        headingAttributeProvider.setAttributes(headingNode, "tagName is ignored", attributes);

        // then
        then(attributes).should().put("id", expectedHeadingId);
        then(attributes).shouldHaveNoMoreInteractions();
    }
}