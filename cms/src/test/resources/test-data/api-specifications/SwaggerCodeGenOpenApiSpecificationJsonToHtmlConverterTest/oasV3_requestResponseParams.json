{
    "openapi": "3.0.0",
    "info": {
        "version": "v1.2.3-irrelevant",
        "title": "Test OAS spec",
        "description": "API description in `Markdown`."
    },
    "paths": {
        "/op-with-request-params-all-kinds/{path-param-a}/{path-param-b}": {
            "get": {
                "summary": "Operation with request parameters of each supported kind.",
                "description": "Verifies that request parameters of all supported kinds are rendered at all and in the right order (other details verified through other operations in the file): path, query, header.",
                "operationId": "op-with-params-all-kinds",
                "parameters": [
                    {
                        "name": "path-param-a",
                        "in": "path"
                    },
                    {
                        "name": "path-param-b",
                        "in": "path"
                    },
                    {
                        "name": "query-param-a",
                        "in": "query"
                    },
                    {
                        "name": "query-param-b",
                        "in": "query"
                    },
                    {
                        "name": "header-param-a",
                        "in": "header"
                    },
                    {
                        "name": "header-param-b",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response description."
                    }
                }
            }
        },
        "/op-with-params-in-supported-data-formats": {
            "get": {
                "summary": "Operation with parameters of all supported data formats",
                "description": "Verifies that data type, format, and fields that depend on them render correctly.",
                "operationId": "op-with-params-in-supported-data-formats",
                "parameters": [
                    {
                        "name": "Param-String",
                        "in": "header",
                        "schema": {
                            "type": "string",
                            "default": "[string-a]&<string-b>",
                            "enum": [
                                "[string-a]&<string-b>",
                                "[string-c]&<string-d>",
                                null,
                                "",
                                "< >",
                                "&"
                            ],
                            "example": "[string-c]&<string-d>"
                        }
                    },
                    {
                        "name": "Param-String-Date",
                        "in": "header",
                        "schema": {
                            "type": "string",
                            "format": "date",
                            "default": "1984-01-01",
                            "example": "2020-02-29"
                        }
                    },
                    {
                        "name": "Param-String-Date-Time",
                        "in": "header",
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "default": "2020-02-30T23:59:59Z",
                            "example": "2020-02-29T23:59:59Z"
                        }
                    },
                    {
                        "name": "Param-Integer-32bit-int",
                        "in": "header",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": -10,
                            "example": -11
                        }
                    },
                    {
                        "name": "Param-Integer-64bit-int",
                        "in": "header",
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "default": -14,
                            "example": -12
                        }
                    },
                    {
                        "name": "Param-Number-Float",
                        "in": "header",
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "default": -1.41,
                            "example": -1.42
                        }
                    },
                    {
                        "name": "Param-Number-Double",
                        "in": "header",
                        "schema": {
                            "type": "number",
                            "format": "double",
                            "enum": [
                                -1.40,
                                -1.43
                            ],
                            "default": -1.40,
                            "example": -1.43
                        }
                    },
                    {
                        "name": "Param-Boolean",
                        "in": "header",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "enum": [
                                false,
                                true
                            ],
                            "example": true
                        }
                    },
                    {
                        "name": "Param-Array-Primitive",
                        "in": "header",
                        "schema": {
                            "type": "array",
                            "default": "[-1.40, 1, \"string-value-a\"]",
                            "example": "[-1.42, 0, \"string-value-b\"]"
                        }
                    },
                    {
                        "name": "Param-Array-Of-JSON",
                        "in": "header",
                        "schema": {
                            "type": "array",
                            "default": "[{\n  \"a\": \"aa\"\n}, {\n  \"b\": \"bb\"\n}]",
                            "example": "[{\n  \"c\": \"cc\"\n}, {\n  \"d\": \"ee\"\n}]"
                        }
                    },
                    {
                        "name": "Param-Object",
                        "in": "header",
                        "schema": {
                            "type": "object",
                            "default": "{\n  \"html-hostile-chars\": \"< > &\" \n}",
                            "example": "{\n  \"html-sensitive-chars\": \"< > &\" \n}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response description."
                    }
                }
            }
        },
        "/op-with-request-param-with-all-fields": {
            "get": {
                "summary": "Operation with request parameter with all supported meta data fields.",
                "operationId": "op-with-request-param-with-all-fields",
                "parameters": [
                    {
                        "name": "param-with-all-fields",
                        "in": "header",
                        "required": true,
                        "description": "Param description in `Markdown`.",
                        "schema": {
                            "type": "string",
                            "default": "[string-a]&<string-b>",
                            "enum": [
                                "Values with various types of characters; detailed cases are exercised in EnumHelperTest.",
                                "[string-a]&<string-b>",
                                null,
                                10.20,
                                "",
                                "< >",
                                "&"
                            ],
                            "example": "[string-c]&<string-d>",
                            "pattern": "^([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])T\\d{2}:\\d{2}:\\d{2}\\+\\d{2}:\\d{2})$|^([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])T\\d{2}:\\d{2}:\\d{2})$|^([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])T\\d{2}:\\d{2}:\\d{2}\\+\\d{2}:\\d{2})$|^([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))$",
                            "minimum": -10.11,
                            "maximum": 10.10,
                            "exclusiveMinimum": true,
                            "exclusiveMaximum": true,
                            "minLength": 0,
                            "maxLength": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response description."
                    }
                }
            }
        },
        "/op-with-params-with-all-min-max-exlusives": {
            "get": {
                "summary": "Operation with parameters with inclusive/exclusive variants of min max values.",
                "description": "Verifies that inclusive and exclusive status of min and max values is indicated correctly.",
                "operationId": "op-with-params-with-all-min-max-exlusives",
                "parameters": [
                    {
                        "name": "param-with-min-inclusive-max-exclusive",
                        "in": "header",
                        "description": "Verifies that inclusive min and exclusive max are marked as such.",
                        "schema": {
                            "type": "string",
                            "minimum": -10.110,
                            "maximum": 10.100,
                            "exclusiveMinimum": false,
                            "exclusiveMaximum": true
                        }
                    },
                    {
                        "name": "param-with-min-exclusive-max-inclusive",
                        "in": "header",
                        "description": "Verifies that exclusive min and inclusive max are marked as such.",
                        "schema": {
                            "type": "string",
                            "minimum": -10.120,
                            "maximum": 10.110,
                            "exclusiveMinimum": true,
                            "exclusiveMaximum": false
                        }
                    },
                    {
                        "name": "param-with-min-max-inclusive-by-default",
                        "in": "header",
                        "description": "Verifies that min and max are marked as inclusive by default.",
                        "schema": {
                            "type": "string",
                            "minimum": -10.130,
                            "maximum": 10.140
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response description."
                    }
                }
            }
        },
        "/op-with-response-headers": {
            "get": {
                "summary": "Operation with response headers.",
                "description": "Verifies that response headers are rendered at all. It's assumed that response headers are rendered using the same mechanism as the request parameters, and so the details are verified through other operations in this file.",
                "operationId": "op-with-response-headers",
                "responses": {
                    "200": {
                        "description": "Response description.",
                        "headers": {
                            "response-header-a": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "response-header-b": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
