---
/content/documents/administration/inference-rules:
  /determine-visitor-interest-type:
    /determine-visitor-interest-type[1]:
      /inferenceengine:goalvalue[1]:
        jcr:primaryType: selection:listitem
        selection:key: events
        selection:label: Events
      /inferenceengine:goalvalue[2]:
        jcr:primaryType: selection:listitem
        selection:key: news
        selection:label: News
      /inferenceengine:goalvalue[3]:
        jcr:primaryType: selection:listitem
        selection:key: unknown
        selection:label: Unknown
      /inferenceengine:icon:
        hippo:docbase: cafebabe-cafe-babe-cafe-babecafebabe
        hippo:facets: []
        hippo:modes: []
        hippo:values: []
        jcr:primaryType: hippogallerypicker:imagelink
      /inferenceengine:parameter[1]:
        inferenceengine:name: goal.uri.mapping.1
        inferenceengine:value:
        - 'news : /news'
        jcr:primaryType: inferenceengine:parameter
      /inferenceengine:parameter[2]:
        inferenceengine:name: goal.uri.mapping.2
        inferenceengine:value:
        - 'events : /news-and-events/events'
        jcr:primaryType: inferenceengine:parameter
      hippo:availability: []
      hippostd:state: draft
      hippostdpubwf:createdBy: admin
      hippostdpubwf:creationDate: 2019-05-20T09:42:28.408Z
      hippostdpubwf:lastModificationDate: 2019-05-20T09:42:28.408Z
      hippostdpubwf:lastModifiedBy: admin
      hippotranslation:id: 8b8aa11e-6d70-43dd-b1ee-8aeff7c757da
      hippotranslation:locale: document-type-locale
      inferenceengine:collector: inferenceRulesVisitorInterestType
      inferenceengine:description: Determine Visitor Interest Type
      inferenceengine:expression: "// The primary goal data to infer from various\
        \ inputs.\r\nvar interestType = \"unknown\";\r\n\r\n// Just as an example,\
        \ input variables here are the current request URI and/or the 'Referer' http\
        \ header.\r\nvar requestURI = $.request.requestURI;\r\nvar referer = $.request.getHeader(\"\
        Referer\");\r\n\r\n// If it contains either '/events' or '/news', the goal\
        \ value is determined accordingly.\r\nfor (var paramName : $.parameterNames)\
        \ {\r\n    if (paramName.startsWith(\"goal.uri.mapping.\")) {\r\n        var\
        \ paramValue = $.getParameter(paramName);\r\n        var pair = string:split(paramValue,\
        \ \" :\"); var type = arrays:get(pair, 0); var uri = arrays:get(pair, 1);\r\
        \n        if (requestURI.contains(uri) or referer.contains(uri)) {\r\n   \
        \         interestType = type;\r\n            break;\r\n        }\r\n    }\r\
        \n}\r\n\r\n// If the interestType goal value was determined,\r\n// and if\
        \ this is invoked in the relevance collector context,\r\n// you can store\
        \ extra goal data values map ($.collectorContext.extraData)\r\n// and increment\
        \ the counter for the goal value to store it back to the targeting data.\r\
        \nif ($.hasCollectorContext()) {\r\n    // Sets the request level goal value\
        \ before determining the max counter valued type by counterMap.\r\n    $.collectorContext.setRequestLevelGoalValue(interestType);\r\
        \n    $.logger.debug(\"requestLevelGoalValue: {}\", interestType);\r\n   \
        \ // Get the counter map for each interest type goal value.\r\n    var counterMap\
        \ = $.collectorContext.extraData.get(\"counterMap\");\r\n    // If the counter\
        \ map doesn't exist yet, create a new one and put it back to extra data map.\r\
        \n    if (counterMap == null) {\r\n        counterMap = counter:newMap();\r\
        \n        $.collectorContext.extraData.put(\"counterMap\", counterMap);\r\n\
        \    }\r\n    interestType = counter:incrementAndGetMaxKey(counterMap, interestType);\r\
        \n    $.logger.debug(\"counterMap: {}\", counterMap);\r\n}\r\n\r\n// For an\
        \ easier extension/integration, let's see how you can add/read extra attributes.\r\
        \nvar fooConnector = $.getAttribute(\"fooMarketingConnector\");\r\nvar account\
        \ = fooConnector != null ? fooConnector.getAccount() : null;\r\nif (account\
        \ != null) {\r\n    $.logger.debug(\"Account : \" + account);\r\n}\r\n\r\n\
        // Leave a log and return the primary goal value, interestType, finally.\r\
        \n$.logger.debug(\"interestType return: {}\", interestType);\r\nreturn interestType;"
      inferenceengine:id: rules.visitor.interest.type
      inferenceengine:title: Determine Visitor Interest Type
      jcr:mixinTypes:
      - mix:referenceable
      jcr:primaryType: inferenceengine:rulesdocument
    /determine-visitor-interest-type[2]:
      /inferenceengine:goalvalue[1]:
        jcr:primaryType: selection:listitem
        selection:key: events
        selection:label: Events
      /inferenceengine:goalvalue[2]:
        jcr:primaryType: selection:listitem
        selection:key: news
        selection:label: News
      /inferenceengine:goalvalue[3]:
        jcr:primaryType: selection:listitem
        selection:key: unknown
        selection:label: Unknown
      /inferenceengine:icon:
        hippo:docbase: cafebabe-cafe-babe-cafe-babecafebabe
        hippo:facets: []
        hippo:modes: []
        hippo:values: []
        jcr:primaryType: hippogallerypicker:imagelink
      /inferenceengine:parameter[1]:
        inferenceengine:name: goal.uri.mapping.1
        inferenceengine:value:
        - 'news : /news'
        jcr:primaryType: inferenceengine:parameter
      /inferenceengine:parameter[2]:
        inferenceengine:name: goal.uri.mapping.2
        inferenceengine:value:
        - 'events : /news-and-events/events'
        jcr:primaryType: inferenceengine:parameter
      hippo:availability:
      - preview
      hippostd:state: unpublished
      hippostdpubwf:createdBy: admin
      hippostdpubwf:creationDate: 2019-05-20T09:42:28.408Z
      hippostdpubwf:lastModificationDate: 2019-05-20T09:45:57.875Z
      hippostdpubwf:lastModifiedBy: admin
      hippotranslation:id: 8b8aa11e-6d70-43dd-b1ee-8aeff7c757da
      hippotranslation:locale: document-type-locale
      inferenceengine:collector: inferenceRulesVisitorInterestType
      inferenceengine:description: Determine Visitor Interest Type
      inferenceengine:expression: "// The primary goal data to infer from various\
        \ inputs.\r\nvar interestType = \"unknown\";\r\n\r\n// Just as an example,\
        \ input variables here are the current request URI and/or the 'Referer' http\
        \ header.\r\nvar requestURI = $.request.requestURI;\r\nvar referer = $.request.getHeader(\"\
        Referer\");\r\n\r\n// If it contains either '/events' or '/news', the goal\
        \ value is determined accordingly.\r\nfor (var paramName : $.parameterNames)\
        \ {\r\n    if (paramName.startsWith(\"goal.uri.mapping.\")) {\r\n        var\
        \ paramValue = $.getParameter(paramName);\r\n        var pair = string:split(paramValue,\
        \ \" :\"); var type = arrays:get(pair, 0); var uri = arrays:get(pair, 1);\r\
        \n        if (requestURI.contains(uri) or referer.contains(uri)) {\r\n   \
        \         interestType = type;\r\n            break;\r\n        }\r\n    }\r\
        \n}\r\n\r\n// If the interestType goal value was determined,\r\n// and if\
        \ this is invoked in the relevance collector context,\r\n// you can store\
        \ extra goal data values map ($.collectorContext.extraData)\r\n// and increment\
        \ the counter for the goal value to store it back to the targeting data.\r\
        \nif ($.hasCollectorContext()) {\r\n    // Sets the request level goal value\
        \ before determining the max counter valued type by counterMap.\r\n    $.collectorContext.setRequestLevelGoalValue(interestType);\r\
        \n    $.logger.debug(\"requestLevelGoalValue: {}\", interestType);\r\n   \
        \ // Get the counter map for each interest type goal value.\r\n    var counterMap\
        \ = $.collectorContext.extraData.get(\"counterMap\");\r\n    // If the counter\
        \ map doesn't exist yet, create a new one and put it back to extra data map.\r\
        \n    if (counterMap == null) {\r\n        counterMap = counter:newMap();\r\
        \n        $.collectorContext.extraData.put(\"counterMap\", counterMap);\r\n\
        \    }\r\n    interestType = counter:incrementAndGetMaxKey(counterMap, interestType);\r\
        \n    $.logger.debug(\"counterMap: {}\", counterMap);\r\n}\r\n\r\n// For an\
        \ easier extension/integration, let's see how you can add/read extra attributes.\r\
        \nvar fooConnector = $.getAttribute(\"fooMarketingConnector\");\r\nvar account\
        \ = fooConnector != null ? fooConnector.getAccount() : null;\r\nif (account\
        \ != null) {\r\n    $.logger.debug(\"Account : \" + account);\r\n}\r\n\r\n\
        // Leave a log and return the primary goal value, interestType, finally.\r\
        \n$.logger.debug(\"interestType return: {}\", interestType);\r\nreturn interestType;"
      inferenceengine:id: rules.visitor.interest.type
      inferenceengine:title: Determine Visitor Interest Type
      jcr:mixinTypes:
      - mix:referenceable
      - mix:versionable
      jcr:primaryType: inferenceengine:rulesdocument
    /determine-visitor-interest-type[3]:
      /inferenceengine:goalvalue[1]:
        jcr:primaryType: selection:listitem
        selection:key: events
        selection:label: Events
      /inferenceengine:goalvalue[2]:
        jcr:primaryType: selection:listitem
        selection:key: news
        selection:label: News
      /inferenceengine:goalvalue[3]:
        jcr:primaryType: selection:listitem
        selection:key: unknown
        selection:label: Unknown
      /inferenceengine:icon:
        hippo:docbase: cafebabe-cafe-babe-cafe-babecafebabe
        hippo:facets: []
        hippo:modes: []
        hippo:values: []
        jcr:primaryType: hippogallerypicker:imagelink
      /inferenceengine:parameter[1]:
        inferenceengine:name: goal.uri.mapping.1
        inferenceengine:value:
        - 'news : /news'
        jcr:primaryType: inferenceengine:parameter
      /inferenceengine:parameter[2]:
        inferenceengine:name: goal.uri.mapping.2
        inferenceengine:value:
        - 'events : /news-and-events/events'
        jcr:primaryType: inferenceengine:parameter
      hippo:availability:
      - live
      hippostd:state: published
      hippostdpubwf:createdBy: admin
      hippostdpubwf:creationDate: 2019-05-20T09:42:28.408Z
      hippostdpubwf:lastModificationDate: 2019-05-20T09:45:57.875Z
      hippostdpubwf:lastModifiedBy: admin
      hippostdpubwf:publicationDate: 2019-05-20T09:46:07.132Z
      hippotranslation:id: 8b8aa11e-6d70-43dd-b1ee-8aeff7c757da
      hippotranslation:locale: document-type-locale
      inferenceengine:collector: inferenceRulesVisitorInterestType
      inferenceengine:description: Determine Visitor Interest Type
      inferenceengine:expression: "// The primary goal data to infer from various\
        \ inputs.\r\nvar interestType = \"unknown\";\r\n\r\n// Just as an example,\
        \ input variables here are the current request URI and/or the 'Referer' http\
        \ header.\r\nvar requestURI = $.request.requestURI;\r\nvar referer = $.request.getHeader(\"\
        Referer\");\r\n\r\n// If it contains either '/events' or '/news', the goal\
        \ value is determined accordingly.\r\nfor (var paramName : $.parameterNames)\
        \ {\r\n    if (paramName.startsWith(\"goal.uri.mapping.\")) {\r\n        var\
        \ paramValue = $.getParameter(paramName);\r\n        var pair = string:split(paramValue,\
        \ \" :\"); var type = arrays:get(pair, 0); var uri = arrays:get(pair, 1);\r\
        \n        if (requestURI.contains(uri) or referer.contains(uri)) {\r\n   \
        \         interestType = type;\r\n            break;\r\n        }\r\n    }\r\
        \n}\r\n\r\n// If the interestType goal value was determined,\r\n// and if\
        \ this is invoked in the relevance collector context,\r\n// you can store\
        \ extra goal data values map ($.collectorContext.extraData)\r\n// and increment\
        \ the counter for the goal value to store it back to the targeting data.\r\
        \nif ($.hasCollectorContext()) {\r\n    // Sets the request level goal value\
        \ before determining the max counter valued type by counterMap.\r\n    $.collectorContext.setRequestLevelGoalValue(interestType);\r\
        \n    $.logger.debug(\"requestLevelGoalValue: {}\", interestType);\r\n   \
        \ // Get the counter map for each interest type goal value.\r\n    var counterMap\
        \ = $.collectorContext.extraData.get(\"counterMap\");\r\n    // If the counter\
        \ map doesn't exist yet, create a new one and put it back to extra data map.\r\
        \n    if (counterMap == null) {\r\n        counterMap = counter:newMap();\r\
        \n        $.collectorContext.extraData.put(\"counterMap\", counterMap);\r\n\
        \    }\r\n    interestType = counter:incrementAndGetMaxKey(counterMap, interestType);\r\
        \n    $.logger.debug(\"counterMap: {}\", counterMap);\r\n}\r\n\r\n// For an\
        \ easier extension/integration, let's see how you can add/read extra attributes.\r\
        \nvar fooConnector = $.getAttribute(\"fooMarketingConnector\");\r\nvar account\
        \ = fooConnector != null ? fooConnector.getAccount() : null;\r\nif (account\
        \ != null) {\r\n    $.logger.debug(\"Account : \" + account);\r\n}\r\n\r\n\
        // Leave a log and return the primary goal value, interestType, finally.\r\
        \n$.logger.debug(\"interestType return: {}\", interestType);\r\nreturn interestType;"
      inferenceengine:id: rules.visitor.interest.type
      inferenceengine:title: Determine Visitor Interest Type
      jcr:mixinTypes:
      - mix:referenceable
      jcr:primaryType: inferenceengine:rulesdocument
    hippo:name: Determine Visitor Interest Type
    hippo:versionHistory: 9e249fd7-bef4-4c9e-9c1b-377b2d529a12
    jcr:mixinTypes:
    - hippo:named
    - hippo:versionInfo
    - mix:referenceable
    jcr:primaryType: hippo:handle
  hippo:name: Inference Rules
  hippostd:foldertype:
  - new-document
  - new-folder
  jcr:mixinTypes:
  - hippo:named
  - mix:versionable
  jcr:primaryType: hippostd:folder
