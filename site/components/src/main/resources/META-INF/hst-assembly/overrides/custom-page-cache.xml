<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--
      Components related to custom page caching.
    -->

    <!--
    Summary:
      Cache manager for all custom site caches; backed by a disk store.

    Characteristics:
      * Implemented using Ehcache v3.x.
      * Provides a single, configurable location for all caches that are registered with this manager.
    -->
    <bean id="siteCacheManager" class="uk.nhs.digital.cache.OnDiskEhcacheManagerFactoryBean">
        <constructor-arg name="diskStorePath" value="${siteCache.cacheManager.diskStorePath:defaultTempLocation}"/>
    </bean>

    <!--
    Summary:
      Cache for 'heavy' content, i.e. one that:
        * takes a long time to render,
        * is large,
        * incurs non-trivial CPU and RAM/heap cost,
        * can be accessed infrequently.

    Purpose:
      * Reduce the number of times end users have to wait for rendering to complete.
      * Reduce impact of CPU and RAM intensive rendering on system resources.
      * Support cases that are not well served by any of the out of the box available caching solutions,
        as these do not prevent re-rendering of the heavy content if it's accessed infrequently
        (see https://community.bloomreach.com/t/does-stale-page-cache-eliminate-re-renderings-for-less-frequent-requests/2959).

    Characteristics:
     * Very long time-to-idle (TTI): items can stay unused in the cache even for weeks on end without re-rendering.
     * Backed by persistent disk store: to enable long TTI.
     * No in-memory cache: to reduce impact on RAM/heap and avoid adding to memory used by First Level Page Caching (FLPC).
     * Not blocking: blocking and thundering-heard protection delegated to FLPC; this avoids complication of making the cache
       self-populating.
     * Uses Ehcache v3.x: see Ehcache docs for more details.

    NOTE:
      Recommended to ONLY USE FOR CONTENT OF PAGES THAT ARE CACHED BY FIRST LEVEL PAGE CACHING in order to provide blocking and
      resilience against thundering herd.

      If using in other context, either:
      * make sure that there is no risk from non-blocking behaviour,
      * or turn this cache into a blocking one by making it self-populating (see Ehcache docs for details),
      * or simply add a new cache with different parameters.
    -->
    <bean id="heavyContentEhcache" class="uk.nhs.digital.cache.DiskOnlyEhcacheFactoryBean">
        <constructor-arg name="cacheManager" ref="siteCacheManager"/>
        <constructor-arg name="cacheName" value="heavyContentPageCache"/>
        <constructor-arg name="maxMegabytesLocalDisk" value="${siteCache.heavyContentPageCache.maxMegabytesLocalDisk:128}"/>
        <constructor-arg name="diskContentSurvivesJvmRestarts" value="${siteCache.heavyContentPageCache.diskContentSurvivesJvmRestarts:false}"/>
        <constructor-arg name="timeToIdle" value="${siteCache.heavyContentPageCache.timeToIdle:PT24H}"/>
    </bean>

    <!--<alias alias="heavyContentCache" name="#{ '${siteCache.heavyContentPageCache.type}' == 'disk' ? 'heavyContentCacheDisk' : 'heavyContentCacheRedis' }" />-->

    <!--<bean name="#{ 'heavyContentCacheDisk' + ('${siteCache.heavyContentPageCache.type}' == 'disk' ? ';heavyContentCache' : '') }" class="uk.nhs.digital.cache.Cache">-->
    <!--<bean name="#{'${siteCache.heavyContentPageCache.type}'=='disk'?'heavyContentCache':'heavyContentCacheDisk'}" class="uk.nhs.digital.cache.Cache">-->
<!--    <bean name="heavyContentCacheDisk" class="uk.nhs.digital.cache.Cache" primary="#{T(java.lang.Boolean).parseBoolean('${siteCache.heavyContentPageCache.type}'=='disk'?true:false)}">-->
    <bean name="heavyContentCacheDisk" class="uk.nhs.digital.cache.Cache">
        <constructor-arg name="ehcache" ref="heavyContentEhcache"/>
    </bean>

    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg name="url" value="${siteCache.heavyContentPageCache.redisUrl}"/>
    </bean>

    <!--<bean name="#{ 'heavyContentCacheRedis' + ('${siteCache.heavyContentPageCache.type}' == 'redis' ? ';heavyContentCache' : '') }" class="uk.nhs.digital.cache.RedisCache">-->
    <!--<bean name="#{'${siteCache.heavyContentPageCache.type}'=='redis'?'heavyContentCache':'heavyContentCacheRedis'}" class="uk.nhs.digital.cache.RedisCache">-->
<!--    <bean name="heavyContentCacheRedis;heavyContentCache" class="uk.nhs.digital.cache.RedisCache" primary="#{T(java.lang.Boolean).parseBoolean('${siteCache.heavyContentPageCache.type}'=='redis'?true:false)}">-->
    <bean name="heavyContentCacheRedis" class="uk.nhs.digital.cache.RedisCache">
        <constructor-arg name="jedisPool" ref="jedisPool"/>
        <constructor-arg name="expiryDuration" value="${siteCache.heavyContentPageCache.timeToIdle:PT24H}"/>
        <constructor-arg name="environmentName" value="${hippo.environment}"/>
        <constructor-arg name="nodeId" value="${org.apache.jackrabbit.core.cluster.node_id}"/>
    </bean>

    <bean id="heavyContentCache" class="uk.nhs.digital.cache.HeavyContentCacheFactory" factory-method="factory">
        <constructor-arg name="type" value="${siteCache.heavyContentPageCache.type}"/>
        <constructor-arg name="diskCache" ref="heavyContentCacheDisk"/>
        <constructor-arg name="redisCache" ref="heavyContentCacheRedis"/>
    </bean>

    <!--
    Registers listener that reacts to 'publish' events for documents of types given
    as constructors parameters, evicting corresponding entries from given cache.

    It listens on a cluster wide event bus, and so is invoked on each cluster node,
    resulting in each node-local cache being updated.
    -->
    <bean class="uk.nhs.digital.cache.listener.PersistedHippoEventListenerRegisteringComponent">
        <constructor-arg name="listener">
            <bean class="uk.nhs.digital.cache.listener.CacheEvictingListener">
                <constructor-arg name="cache" ref="heavyContentCache"/>
                <constructor-arg name="eligibleDoctypes">
                    <set>
                        <value>website:apispecification</value>
                    </set>
                </constructor-arg>
            </bean>
        </constructor-arg>
    </bean>

    <!--<beans profile="local">
        &lt;!&ndash; Convenience wrapper for heavyContentEhcache. See JavaDoc for more details. &ndash;&gt;
        <bean id="heavyContentCache" class="uk.nhs.digital.cache.Cache" name="a">
            <constructor-arg name="ehcache" ref="heavyContentEhcache"/>
        </bean>
    </beans>
    <beans profile="cloud-config-odv1">
        &lt;!&ndash; Convenience wrapper for heavyContentEhcache. See JavaDoc for more details. &ndash;&gt;
        <bean id="heavyContentCache" class="uk.nhs.digital.cache.Cache">
            <constructor-arg name="ehcache" ref="heavyContentEhcache"/>
        </bean>
    </beans>
    <beans profile="cloud-config-odv2">
        <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
            <constructor-arg name="url" value="${siteCache.heavyContentPageCache.redisUrl}"/>
        </bean>

        <bean id="heavyContentCache" class="uk.nhs.digital.cache.RedisCache">
            <constructor-arg name="jedisPool" ref="jedisPool"/>
            <constructor-arg name="expiryDuration" value="${siteCache.heavyContentPageCache.timeToIdle:PT24H}"/>
            <constructor-arg name="environmentName" value="${hippo.environment}"/>
            <constructor-arg name="nodeId" value="${org.apache.jackrabbit.core.cluster.node_id}"/>
        </bean>
    </beans>-->
</beans>
