package uk.nhs.digital.common.valves;

import org.apache.commons.lang3.*;
import org.hippoecm.hst.container.valves.*;
import org.hippoecm.hst.content.beans.query.*;
import org.hippoecm.hst.content.beans.query.exceptions.*;
import org.hippoecm.hst.core.container.*;
import org.hippoecm.hst.core.linking.*;
import org.hippoecm.hst.core.request.*;
import org.slf4j.*;

import java.io.*;

/**
 * A redirect mechanism is required outside of Hippo to find the URL of any traffic
 * that hits specific urls. Following this approach, old urls (generated by GOSS)
 * are still working: this can drastically reduce large number of URL rewriter
 * specific rule.
 */
public abstract class AbstractDocumentIdValve extends AbstractOrderableValve {

    private static final Logger log = LoggerFactory.getLogger(AbstractDocumentIdValve.class);

    /**
     * @return first part of the url that must be intercepted
     */
    public abstract String getBasePath();

    /**
     * Based on the specific url to intercept, the HstQuery should only fetch documents
     * of predefined primary node types
     *
     * @param requestContext needed to instantiate the query
     * @return HstQuery with predefined primary node type
     * @throws QueryException in case of issues with the query manager
     */
    public abstract HstQuery getQuery(HstRequestContext requestContext, String documentId) throws QueryException;

    public abstract String getDocumentIdFromUrl(String pathInfo, String basePath);

    @Override
    public void invoke(ValveContext context) throws ContainerException {
        try {
            HstRequestContext requestContext = context.getRequestContext();
            //fetching the path info
            String pathInfo = requestContext.getServletRequest().getPathInfo();
            //extracting the gossid from the url
            String documentId = getDocumentIdFromUrl(pathInfo, getBasePath());
            //intercepting requests having the id in the url
            if (StringUtils.isNotEmpty(documentId)) {
                try {
                    HstQuery hstQuery = getQuery(requestContext, documentId);
                    hstQuery.setLimit(1);
                    HstQueryResult result = hstQuery.execute();
                    //if at least one bean has been found with that gossid, then a redirect is needed
                    if (result.getSize() > 0) {
                        // linkCreator is responsible for link generation in the site application
                        HstLinkCreator linkCreator = requestContext.getHstLinkCreator();
                        // fetching the canonical url related to the retrieved bean
                        HstLink link = linkCreator.create(result.getHippoBeans().nextHippoBean(), requestContext);
                        //redirecting the user to the new url, taking into consideration the servlet context + channel path
                        requestContext.getServletResponse().sendRedirect(link.toUrlForm(requestContext, false));
                    }
                } catch (QueryException queryExcpetion) {
                    log.error("Query exception while creating query having scope {} {}", requestContext.getSiteContentBaseBean(), queryExcpetion);
                } catch (IOException ioException) {
                    log.error("UI exception while redirecting {}", ioException);
                }
            }
        } finally {
            context.invokeNext();
        }
    }

}

